#+TITLE: aggiestack: Part A

* Time Spent
  I spent abount 20 to 25 hours, according to my timer logs on Part A.  I had some trouble migrating my hardware state to include the rack information, and then updating all the unit tests to work with that.  That took around 5 hours.  I was done with the 'big' parts at about 14 hours in.

** What I learned
   Refactoring takes a long time!  I learned about keeping functions lightweight and composable.  For some functions, I kept them to be just DRY (don't repeat yourself), making it kind of brittle and not composable.  I'm viewing the functions as just transforming data.  I noticed that pure functions were easier to build upon; the refactored functions usually including file I/O.

   Unit takes also rock, in the sense that it gives me confidence that the new code logically works.

* Github
  The github commit with the code for part A can be found [[https://github.tamu.edu/cyinwei/489-17-c/commit/19489697362ee15267be2bd3aa724673eb7a7a7e][here]].  The commit after will include the readme (this file).
* Design
  Very pure and data centric.  After parsing the =.txt= files, I store the data in JSON files.  Then server creates and deletes update the admin JSON file and the server JSON file.  There can be legit I/O errors with that (I would send queries to a SQL DB to try to get around that).  It's definitely not thread proof.

  The CLI leverages click, a python package for writing CLIs.  It's very function driven, which I like.  The display, load, and parsing are all pure and reusable.  The writes aren't.
* Installation
  I moved to using [[https://docs.pipenv.org/][=Pipenv=]] for this project, which is like a reproducible, better =pip=.  To install =pipenv=, just run `pip install pipenv` (straight from the home page).

  Then in the project 4 (or zipped folder) directory, just run =pipenv install=, and it'll pick up the =Pipfile= and install my dependencies.  You'll notice that it'll install the editable (the =aggiestack= CLI), you now, afer you run =pipenv shell=, you can load the environment and run =aggiestack ...=!  

  As a backup, you can default to the =aggiestack.py= to run aggiestack.  My dependencies are =click= and =python3=.

* Tests
  You can run my unit tests with =pytest= in the main folder (project4 or the unzipped folder).

* Output
  Here's what I have for the =stdout= from running =./input-sample-2.txt= on my machine.

  #+BEGIN_SRC
Successfully configured hardware with [hdwr-config.txt].
Available default hardware configurations:
|name|cache size|
|----|----------|
|r1  |40960     |
|r2  |40960     |

|name  |rack|ip         |mem|disk|vcpu|
|------|----|-----------|---|----|----|
|m1    |r1  |128.0.0.1  |16 |8   |4   |
|m2    |r1  |128.0.0.2  |16 |32  |4   |
|m3    |r1  |128.0.0.3  |16 |16  |4   |
|m4    |r2  |128.0.0.4  |16 |8   |4   |
|k1    |r2  |128.1.1.0  |32 |32  |8   |
|k2    |r2  |128.1.0.2  |32 |32  |8   |
|k3    |r2  |128.1.3.0  |32 |32  |8   |
|calvin|r1  |128.129.4.4|8  |16  |1   |
|hobbes|r1  |1.1.1.1    |16 |64  |16  |
|dora  |r1  |1.1.1.2    |64 |256 |16  |
Successfully configured images with [image-config.txt].
Available base images configurations:
|name           |size|path                         |
|---------------|----|-----------------------------|
|linux-ubuntu   |128 |/images/linux-ubuntu-v1.0.img|
|linux-sles     |512 |/images/old-image.img        |
|linux-ubuntu-16|2048|/images/linux-ubuntu-16.img  |
Successfully configured flavors with [flavor-config.txt].
Available base flavor configurations:
|name  |mem|disk|vcpu|
|------|---|----|----|
|small |1  |1   |1   |
|medium|8  |2   |4   |
|large |16 |2   |4   |
|xlarge|32 |4   |8   |
Currently active virtual servers and their physical server locations (hardware).
NONE.
Successfully created virtual server [my-first-instance].
Successfully created virtual server [my-second-instance].
Currently active virtual servers and their physical server locations (hardware).
|name              |hardware|
|------------------|--------|
|my-first-instance |m1      |
|my-second-instance|m2      |
Currently active virtual servers:
|name              |image       |flavor|
|------------------|------------|------|
|my-first-instance |linux-ubuntu|small |
|my-second-instance|linux-ubuntu|medium|
Available current (admin) hardware configurations:
Racks:
|name|cache size|
|----|----------|
|r1  |40960     |
|r2  |40960     |

Servers:
|name  |rack|ip         |mem|disk|vcpu|
|------|----|-----------|---|----|----|
|m1    |r1  |128.0.0.1  |15 |7   |3   |
|m2    |r1  |128.0.0.2  |8  |30  |0   |
|m3    |r1  |128.0.0.3  |16 |16  |4   |
|m4    |r2  |128.0.0.4  |16 |8   |4   |
|k1    |r2  |128.1.1.0  |32 |32  |8   |
|k2    |r2  |128.1.0.2  |32 |32  |8   |
|k3    |r2  |128.1.3.0  |32 |32  |8   |
|calvin|r1  |128.129.4.4|8  |16  |1   |
|hobbes|r1  |1.1.1.1    |16 |64  |16  |
|dora  |r1  |1.1.1.2    |64 |256 |16  |
Removed server [my-first-instance].
Currently active virtual servers and their physical server locations (hardware).
|name              |hardware|
|------------------|--------|
|my-second-instance|m2      |
Available current (admin) hardware configurations:
Racks:
|name|cache size|
|----|----------|
|r1  |40960     |
|r2  |40960     |

Servers:
|name  |rack|ip         |mem|disk|vcpu|
|------|----|-----------|---|----|----|
|m1    |r1  |128.0.0.1  |16 |8   |4   |
|m2    |r1  |128.0.0.2  |8  |30  |0   |
|m3    |r1  |128.0.0.3  |16 |16  |4   |
|m4    |r2  |128.0.0.4  |16 |8   |4   |
|k1    |r2  |128.1.1.0  |32 |32  |8   |
|k2    |r2  |128.1.0.2  |32 |32  |8   |
|k3    |r2  |128.1.3.0  |32 |32  |8   |
|calvin|r1  |128.129.4.4|8  |16  |1   |
|hobbes|r1  |1.1.1.1    |16 |64  |16  |
|dora  |r1  |1.1.1.2    |64 |256 |16  |
  #+END_SRC

* Sources
  I used a lot more Stackoverflow this time, but the sources remain the same.

  - The [[http://click.pocoo.org/5/][click documentation]] helped a ton.  Click is a command line interface builder in python.  This intro [[https://kushaldas.in/posts/building-command-line-tools-in-python-with-click.html][blog post]] convinced me to use it.
  - The Python3 documentation, specifically on =pathlib= and on file handling.
  - Vscode python, specifically using =flake8=, which is way less restrictive than =pylint=.
  - Stackoverflow for answers from Google.
